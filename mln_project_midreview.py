###### Code of the part presented till mid-review
# Communities ,Pagerank and k_core analysis 


# -*- coding: utf-8 -*-
"""MLN_Project_midreview.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rRugoywQMc7m0HxiIHovz2qKuh34-0qi
"""

from google.colab import drive
drive.mount('/content/gdrive')

import networkx as nx
import numpy as np

G = nx.DiGraph()
filename = "/content/gdrive/My Drive/Colab Notebooks/datasets/graph_cb.txt"
with open(filename) as f:
	line = f.readline()
	while line:
		a,b,c = list(map(int,line.strip().split()))
		G.add_edge(a,b)
		line = f.readline()

d = nx.pagerank(G)

sorts =  {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}

iterator = iter(sorts.items())
print("Bottom 5 node ids with the lowest PageRank scores(along with respective values): ")
for i in range(5):
    print(next(iterator))
print("Top 5 node ids with the highest PageRank scores(along with respective values): ")
for i in range(G.number_of_nodes()-10):
    next(iterator)
for i in range(5):
    print(next(iterator))

# # Personalized PR
# jumping_probs = sorts
# jumping_probs = dict.fromkeys(jumping_probs, 0)
# jumping_probs[1] = 1

# d = nx.pagerank(G,personalization = jumping_probs)

import community

part = dict([])
for node in G.nodes():
    part[node] = node % 2
ind = community.induced_graph(part, G)

nx.draw(ind)

import community
G_undirected = G.to_undirected()
bp = community.best_partition(G_undirected)

mod = community.modularity(bp,G_undirected,weight='weight')

mod

from networkx.algorithms.core import k_core

G_undirected = G.to_undirected()
G_undirected.remove_edges_from(nx.selfloop_edges(G_undirected))
max_kcore = k_core(G_undirected)

print("Number of nodes in the max k core: " + str(max_kcore.number_of_nodes()))
print("Number of edges in the max k core: " + str(max_kcore.number_of_edges()))
print(     max_kcore.degree( list(max_kcore.nodes())[0] ) )

G_undirected.remove_edges_from(nx.selfloop_edges(G_undirected))

k1 = k_core(G_undirected,k=2)
k2 = k_core(G_undirected,k=5)
k3 = k_core(G_undirected,k=10)
k4 = k_core(G_undirected,k=15)
k5 = k_core(G_undirected,k=20)
k6 = k_core(G_undirected,k=25)
k7 = k_core(G_undirected,k=30)
k8 = k_core(G_undirected,k=35)
k9 = k_core(G_undirected,k=40)
k10 = k_core(G_undirected,k=45)

sizes = []
klist =[2,5,10,15,20,25,30,35,40,45]
sizes.append(k1.number_of_nodes())
sizes.append(k2.number_of_nodes())
sizes.append(k3.number_of_nodes())
sizes.append(k4.number_of_nodes())
sizes.append(k5.number_of_nodes())
sizes.append(k6.number_of_nodes())
sizes.append(k7.number_of_nodes())
sizes.append(k8.number_of_nodes())
sizes.append(k9.number_of_nodes())
sizes.append(k10.number_of_nodes())

import matplotlib.pyplot as plt

plt.bar(klist,sizes)
plt.plot(klist,sizes,color='r')
plt.title("Size of kcore v/s value of k")
plt.ylabel("Size of the k_core")
plt.xlabel("Value of k")
plt.show()

plt.bar([10,20,30,40,50],[k3.number_of_nodes(),k5.number_of_nodes(),k7.number_of_nodes(),k9.number_of_nodes(),max_kcore.number_of_nodes()] )
plt.plot([10,20,30,40,50],[k3.number_of_nodes(),k5.number_of_nodes(),k7.number_of_nodes(),k9.number_of_nodes(),max_kcore.number_of_nodes()],color='r')
plt.title("Size of kcore v/s value of k")
plt.ylabel("Size of the k_core")
plt.xlabel("Value of k")
plt.show()

# import matplotlib.pyplot as plt

# plt.figure(3,figsize=(8,6))
# cmap = plt.cm.get_cmap('Set1')
# pos = nx.spring_layout(G)
# node_colors = [cmap(c[d]) if x[d] ==1 else "white" for d in G.nodes()]
# node_edge_colors = [cmap(c[d]) if x[d] ==0 else "black" for d in G.nodes()]
# node_labels = [d for d in G.nodes()]

# nodes = nx.draw_networkx_nodes(G, pos,  node_color = node_colors, linewidths=2)
# nodes.set_edgecolor(node_edge_colors)
# nx.draw_networkx_edges(G, pos)
# nx.draw_networkx_labels(G, pos)

# plt.gca().axis('off')
# plt.show()